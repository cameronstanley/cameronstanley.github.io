<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cameron Stanley</title>
    <description>Creating things and writing about them.</description>
    <link>http://cameronstanley.com/</link>
    <atom:link href="http://cameronstanley.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Mon, 14 Jan 2019 08:55:24 -0600</pubDate>
    <lastBuildDate>Mon, 14 Jan 2019 08:55:24 -0600</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>Productivity with Pomodoro</title>
        <description>&lt;p&gt;In this post I’ll share a popular productivity hack that I have greatly benefited from called the Pomodoro technique. I started off using this tool for managing my time more effectively as a software engineer, but I have been able to incorporate it into other areas of my life to increase the number of tasks I’m able to get done in a shorter period of time. It can also be a great way to plan and organize your week, as well as improve your estimations of how long projects will take to complete. It shines exceptionally well when working remotely where communication tasks like email and Slack can be batched in chunks twice per hour and physical disruptions are minimum.&lt;/p&gt;

&lt;h1 id=&quot;what-is-the-pomodoro-technique&quot;&gt;What Is the Pomodoro Technique&lt;/h1&gt;
&lt;p&gt;The Pomodoro technique looks something like this: work distraction free on a singular task for 25 minutes, then take a short five minute break. This counts as one Pomodoro. After four Pomodoros are completed, take a longer 20 minute break. Repeat this cycle for as many iterations as you can in the work day. During the breaks, do whatever you like - browse your favorite website, use the restroom, brew some coffee, etc. The key is that when you are working on a task, you are solely focused on completing it and save any interruptions for your planned breaks.&lt;/p&gt;

&lt;p&gt;It may seem odd at first to take a five minute break twice per hour, but it’s highly likely you are already wasting significantly more time without realizing it. Breaks punctuate tasks and allow your mind to reset before focusing on something new. By using constraints to your advantage, habitual tasks like checking email or Slack, browsing Reddit, or just getting up and walking around are limited to a fixed set of time.&lt;/p&gt;

&lt;p&gt;Traditonally a physical kitchen timer is used to track the 25/5/20 minute intervals, but setting one on your phone or using one of the many popular apps or websites work just as well (I personally recommend &lt;a href=&quot;https://tomato-timer.com/&quot;&gt;Tomato Timer&lt;/a&gt;). If a task is completed before the timer goes off, you can either use the remaining time to start on the next task or improve on your work in some way. This could come in the form of documentation, testing, or just mentally reviewing what was done.&lt;/p&gt;

&lt;h1 id=&quot;why-does-it-work&quot;&gt;Why Does It Work?&lt;/h1&gt;
&lt;p&gt;Think about the conditions under which you complete your best work. Chances are it’s when you have few distractions, your tasks are clearly defined, and you have momentum carrying you through difficult problems and procrastination. The Pomodoro technique provides a framework for eliminating these hurdles to accomplish more.&lt;/p&gt;

&lt;h2 id=&quot;less-distractions&quot;&gt;Less Distractions&lt;/h2&gt;
&lt;p&gt;When coding, a software engineer performs her best while “in the zone”. This hyperfocused state of furious keyboard pecking and light perspiration produces terrific results, but requires absolute concentration. Being interrupted by responding to a notification or Slack message requires a context switch that consumes time and energy to get into deep focus again. Obviously you can’t ignore urgent situations, but most communication can be batched and addressed at most every 25 minutes.&lt;/p&gt;

&lt;h2 id=&quot;clearly-defined-tasks&quot;&gt;Clearly Defined Tasks&lt;/h2&gt;
&lt;p&gt;In order for tasks to be broken down into 25 minute chunks, the task has to be clearly defined with a clear success state. If you have been given a large project that doesn’t have many requirements, a good first Pomodoro is to clarify and research what actually needs to be accomplished. From there, do your best to estimate and divide the work for Pomodoros. You may be off at first, but over time you will be able to be more realistic about what can be accomplished in a single Pomodoro, and eventually scale your estimation skills out to the day and week.&lt;/p&gt;

&lt;p&gt;Parkinson’s law that “work expands so as to fill the time available for its completion” explains why the 25 minute work window is so effective. If we give ourselves a day to complete a poorly defined monolithic task, we might finish it tomorrow. However, if you analyze and break a problem into its smallest workable parts, your plan of attack will be much more successful.&lt;/p&gt;

&lt;h2 id=&quot;momentum&quot;&gt;Momentum&lt;/h2&gt;
&lt;p&gt;Checking items off a list feels good. If you’re having trouble getting started or feel overwhelmed, completing some low hanging fruit will get your mind moving in the right direction. Progress snowballs quickly with quick wins, and with two tasks being completed an hour, the feeling of forward movement will propel you into action quickly.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;If you want to get more done, I highly recommend at least giving the Pomodoro technique a try. For one week, plan the tasks you wish to accomplish each day and iterate through Pomodoros. You will be surprised what you can complete by adding some simple structure to your workflow, breaking down tasks into clearly defined components, and limiting distractions.&lt;/p&gt;
</description>
        <pubDate>Sun, 13 Jan 2019 00:00:00 -0600</pubDate>
        <link>http://cameronstanley.com/2019/01/13/productivity-with-pomodoro.html</link>
        <guid isPermaLink="true">http://cameronstanley.com/2019/01/13/productivity-with-pomodoro.html</guid>
        
        <category>productivity</category>
        
        
      </item>
    
      <item>
        <title>Announcing All Green for iOS and Android</title>
        <description>&lt;p&gt;I recently had some time over the holidays and decided to build a mobile app. At &lt;a href=&quot;https://www.fleetio.com/&quot;&gt;Fleetio&lt;/a&gt;, we use &lt;a href=&quot;https://circleci.com/&quot;&gt;Circle CI&lt;/a&gt; to automatically run our test suites after every commit. I thought it would be useful to be able to monitor the status of my projects on the go, so I set out to create something to solve that problem. As a result, my mobile app All Green is now live in both the &lt;a href=&quot;https://itunes.apple.com/us/app/all-green/id1252330663?mt=8&quot;&gt;App Store&lt;/a&gt; and &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.cameronstanley.all_green&quot;&gt;Google Play&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;All Green is the best way to stay up-to-date on the build statuses of projects being tested through Circle CI. Check failing builds and quickly identify failing tests to keep your projects in the green.&lt;/p&gt;

&lt;p&gt;Features:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;List recent builds for all their projects&lt;/li&gt;
  &lt;li&gt;View build status and details&lt;/li&gt;
  &lt;li&gt;Retry failed builds&lt;/li&gt;
  &lt;li&gt;Cancel currently running builds&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;div class=&quot;row&quot;&gt;
  &lt;div class=&quot;col-md-6&quot;&gt;
    &lt;img src=&quot;/assets/all-green-screenshot-1.png&quot; class=&quot;img-responsive&quot; /&gt;
  &lt;/div&gt;

  &lt;div class=&quot;col-md-6&quot;&gt;
    &lt;img src=&quot;/assets/all-green-screenshot-2.png&quot; class=&quot;img-responsive&quot; /&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;I would greatly appreciate any feedback you on any bugs encountered or features that would improve the app!&lt;/p&gt;
</description>
        <pubDate>Sat, 13 Jan 2018 00:00:00 -0600</pubDate>
        <link>http://cameronstanley.com/2018/01/13/announcing-all-green-for-ios-and-android.html</link>
        <guid isPermaLink="true">http://cameronstanley.com/2018/01/13/announcing-all-green-for-ios-and-android.html</guid>
        
        <category>ios</category>
        
        <category>android</category>
        
        <category>ci</category>
        
        
      </item>
    
      <item>
        <title>Go - First Impressions</title>
        <description>&lt;p&gt;I recently started down the path of learning the Go programming language and wanted to share my experience for anyone interested in becoming a Gopher.&lt;/p&gt;

&lt;h1 id=&quot;why-go&quot;&gt;Why Go?&lt;/h1&gt;
&lt;p&gt;Go is typically labeled as a &lt;a href=&quot;https://en.wikipedia.org/wiki/System_programming&quot;&gt;systems programming&lt;/a&gt; language, making it a great tool for building CLIs and backend services that support other applications. It has concurrency baked in with &lt;a href=&quot;https://tour.golang.org/concurrency/1&quot;&gt;goroutines&lt;/a&gt; and is also very fast. The compiler and static typing are welcome features coming from a Java background, making it a scalable language for larger projects. I see Go as another great addition to the programmer’s toolbox, and I would advise anyone interested in growing their skill set to take a look at this great language.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/go-gopher.png&quot; alt=&quot;Go gopher&quot; title=&quot;Go gopher&quot; class=&quot;center-block&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;working-on-a-project&quot;&gt;Working on a Project&lt;/h1&gt;
&lt;p&gt;I always find the best way to progress in a new language is to pick a non-trivial project and see it through to completion. I’ve been making &lt;a href=&quot;https://github.com/cameronstanley/go-reddit&quot;&gt;go-reddit&lt;/a&gt;, a wrapper for the Reddit API for a few weeks now. I thought it might be cool to make a Reddit CLI for light console browsing, but the API wrappers currently available are a little lacking in functionality. Development has been pretty steady in my off-time, there are just a ton of endpoints to implement and the response objects can be a little tricky to parse. The main challenges have been:&lt;/p&gt;

&lt;h2 id=&quot;decoding-of-json&quot;&gt;Decoding of JSON&lt;/h2&gt;
&lt;p&gt;Parsing the JSON responses from the API is handled using the &lt;a href=&quot;https://godoc.org/encoding/json&quot;&gt;encoding/json package&lt;/a&gt;. The json package will decode the body of a response to a struct, provided that struct’s named fields matches the keys in the JSON object (if not you can explicity declare the mapping using the backticks format as shown below). Here’s an example:&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trophyListing&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Kind&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;`json:&quot;kind&quot;`&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Trophies&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Award&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;`json:&quot;trophies&quot;`&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;`json:&quot;data&quot;`&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewDecoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trophyListing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Where it starts to get tricky is when you have multiple types that can be returned in a listing, which requires more dynamic parsing. I’m still working through the cleanest way to implement this functionality.&lt;/p&gt;

&lt;h2 id=&quot;implementing-oauth2&quot;&gt;Implementing OAuth2&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&quot;golang.org/x/oauth2&quot;&gt;oauth2 package&lt;/a&gt; does a lot of the heavy lifting for implementing OAuth2, but I have still been struggling with a HTTP 429 Too Many Requests error when exchanging the authentication code for an access token according to the protocol:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;oauth2: cannot fetch token: 429 Too Many Requests
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Reddit requires a unique User-Agent header to be set for all authenticated requests, and will heavily rate limit any calls not providing it. Doing some Googling suggests that is the cause of my HTTP 429 error code, but the oauth2 package does not have the functionality to set the User-Agent during the token exchange. It looks like I’m going to need to implement the token exchange manually, which shouldn’t be too difficult.&lt;/p&gt;

&lt;h1 id=&quot;initial-thoughts&quot;&gt;Initial Thoughts&lt;/h1&gt;
&lt;p&gt;In my short amount of time working with Go, I have been impressed with the simple yet powerful syntax. Having a compiler and static type checking took a little bit of getting used to but really increases productivity by catching complation errors. I’m also particularly fond of the &lt;a href=&quot;https://golang.org/cmd/gofmt/&quot;&gt;gofmt&lt;/a&gt; tool that will autocorrect formatting issues leading to more readable and consistent code. The &lt;a href=&quot;https://golang.org/pkg/testing/&quot;&gt;testing package&lt;/a&gt; provides a nice framework to write and run tests and I’m going to try out one of the BDD packages when I have some time. Go feels similar to in spirit to C, but I feel like it is easier to produce fast, working, well tested and documented code using it.&lt;/p&gt;

&lt;p&gt;I did run in to some early issues with not having my $GOPATH set correctly, so be sure to follow the &lt;a href=&quot;https://golang.org/doc/code.html#GOPATH&quot;&gt;install instructions&lt;/a&gt;. Also, when working on go-reddit it took me a little while to figure out that if you are going to use your package locally in a &lt;code class=&quot;highlighter-rouge&quot;&gt;package main&lt;/code&gt; program it needs to be located within your $GOPATH to be able to import it. My project was located in directory outside my $GOPATH and it was a bit of a headache trying to debug it.&lt;/p&gt;

&lt;p&gt;Overall, I am loving Go and would highly recommend it to anyone looking to add a great language to their skill set.&lt;/p&gt;

&lt;h1 id=&quot;learning-resources&quot;&gt;Learning Resources&lt;/h1&gt;
&lt;p&gt;Here’s a list of resources I utilized while learning Go:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://tour.golang.org/list&quot;&gt;A Tour of Go&lt;/a&gt; is the official tutorial and a great way to get your feet wet with the language. I’d recommend starting here since it has an interactive console you can follow along without having to setup your development environment.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://codeschool.com&quot;&gt;Code School&lt;/a&gt; recently launched a new course titled “On Track With Golang” that is a pretty great introduction to the language. Usually their courses are enough to only get the basic syntax of a language down, but I found myself feeling like I had a significant handle on Go once I finished it. If you have an account, definitely spend the time to go through this one.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/avelino/awesome-go&quot;&gt;awesome-go&lt;/a&gt; is a curated list of Go packages that you can use in your projects. It’s always nice to have one of these when exploring a new community to see what is available and to get some quality real-world examples.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://godoc.org/&quot;&gt;GoDoc&lt;/a&gt; is the official documentation host for Go packages. Any open-source project on GitHub, GitLab, or Bitbucket has its documentation published here and is in a clean viewable format. It is very useful when importing and using an open-source package in your project.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;tools&quot;&gt;Tools&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/fatih/vim-go&quot;&gt;vim-go&lt;/a&gt; is a must-have if you are a vim user (like me). Syntax highlighting, gofmt on save, and being able to jump to a declaration are all invaluable.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/golang/lint&quot;&gt;golint&lt;/a&gt; is a linter for Go and a great way to ensure you are writing stylistically correct and GoDoc ready code.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Go Gopher created by Renee French and licensed under &lt;a href=&quot;https://creativecommons.org/licenses/by/3.0/us/&quot;&gt;Creative Commons Attributions 3.0&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 05 Nov 2016 00:00:00 -0500</pubDate>
        <link>http://cameronstanley.com/2016/11/05/go-first-impressions.html</link>
        <guid isPermaLink="true">http://cameronstanley.com/2016/11/05/go-first-impressions.html</guid>
        
        <category>go</category>
        
        
      </item>
    
      <item>
        <title>RubyGems Error</title>
        <description>&lt;p&gt;While trying to get some environment variables setup with Travis CI using the travis gem from the command line I ran in to this error:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;travis encrypt &lt;span class=&quot;nv&quot;&gt;SPOTIFY_CLIENT_ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;obfuscated&amp;gt;
/Users/Cameron/.rvm/rubies/ruby-2.3.0/lib/ruby/site_ruby/2.3.0/rubygems/specification.rb:2159:in &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;method_missing&lt;span class=&quot;s1&quot;&gt;': undefined method `this'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#&amp;lt;Gem::Specification:0x3ff7a8d716f0 travis-1.8.2&amp;gt; (NoMethodError)&lt;/span&gt;
        from /Users/Cameron/.rvm/rubies/ruby-2.3.0/lib/ruby/site_ruby/2.3.0/rubygems/specification.rb:1057:in &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;find_active_stub_by_path&lt;span class=&quot;s1&quot;&gt;'
        from /Users/Cameron/.rvm/rubies/ruby-2.3.0/lib/ruby/site_ruby/2.3.0/rubygems/core_ext/kernel_require.rb:64:in `require'&lt;/span&gt;
        from /Users/Cameron/.rvm/gems/ruby-2.3.0/gems/travis-1.8.2/lib/travis/cli.rb:2:in &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&amp;lt;top &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;required&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&amp;gt;&lt;span class=&quot;s1&quot;&gt;'
        from /Users/Cameron/.rvm/rubies/ruby-2.3.0/lib/ruby/site_ruby/2.3.0/rubygems/core_ext/kernel_require.rb:127:in `require'&lt;/span&gt;
        from /Users/Cameron/.rvm/rubies/ruby-2.3.0/lib/ruby/site_ruby/2.3.0/rubygems/core_ext/kernel_require.rb:127:in &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;rescue &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;require&lt;span class=&quot;s1&quot;&gt;'
        from /Users/Cameron/.rvm/rubies/ruby-2.3.0/lib/ruby/site_ruby/2.3.0/rubygems/core_ext/kernel_require.rb:40:in `require'&lt;/span&gt;
        from /Users/Cameron/.rvm/gems/ruby-2.3.0/gems/travis-1.8.2/bin/travis:7:in &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&amp;lt;top &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;required&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&amp;gt;&lt;span class=&quot;s1&quot;&gt;'
        from /Users/Cameron/.rvm/gems/ruby-2.3.0/bin/travis:22:in `load'&lt;/span&gt;
        from /Users/Cameron/.rvm/gems/ruby-2.3.0/bin/travis:22:in &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&amp;lt;main&amp;gt;&lt;span class=&quot;s1&quot;&gt;'
        from /Users/Cameron/.rvm/gems/ruby-2.3.0/bin/ruby_executable_hooks:15:in `eval'&lt;/span&gt;
        from /Users/Cameron/.rvm/gems/ruby-2.3.0/bin/ruby_executable_hooks:15:in &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&amp;lt;main&amp;gt;&lt;span class=&quot;s1&quot;&gt;'
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;After a bit of googling, this got it working:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem pristine --all
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Cheers!&lt;/p&gt;
</description>
        <pubDate>Tue, 09 Feb 2016 13:30:00 -0600</pubDate>
        <link>http://cameronstanley.com/2016/02/09/rubygems-error.html</link>
        <guid isPermaLink="true">http://cameronstanley.com/2016/02/09/rubygems-error.html</guid>
        
        <category>ruby</category>
        
        <category>rubygems</category>
        
        
      </item>
    
      <item>
        <title>Using Glyphicons PRO with Rails</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://getbootstrap.com&quot;&gt;Bootstrap 3&lt;/a&gt; comes packaged with a fancy set of over 250 free icons called &lt;a href=&quot;http://glyphicons.com/&quot;&gt;Glyphicons&lt;/a&gt; that can easily be used to make your application more user friendly. After using them for some time, but needing a little more variety in my icon choice, I decided to upgrade to Glyphicons PRO which provides close to 1000 icons in various formats and sizes. It also includes a web font which plays nicely with Rails after a little configuration. Here’s how to get Glyphicons PRO working in your Rails project:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note: This tutorial assumes a Rails 4 project using Sass.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First, make the web fonts available in the asset pipeline by copying them to app/assets/fonts (create this directory if it doesn’t already exist).&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir &amp;lt;rails_root&amp;gt;/app/assets/fonts   
cp glyphicons_pro/glyphicons/web/html_css/fonts/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &amp;lt;rails_root&amp;gt;/app/assets/fonts/   
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Next, copy the provided glyphicons.css file to app/assets/stylesheets and name it with a .css.scss extension.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cp glyphicons_pro/glyphicons_all/glyphicons/web/html_css/css/glyphicons.css &amp;lt;rails_root&amp;gt;/app/assets/stylesheets/glyphicons.css.scss
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Finally, the URL paths for the fonts inside of glyphicons.css.scss need to be modified to use the asset helper &lt;code class=&quot;highlighter-rouge&quot;&gt;font-url&lt;/code&gt;. Remove the &lt;code class=&quot;highlighter-rouge&quot;&gt;../fonts/&lt;/code&gt; portion of the path and wrap the filename in &lt;code class=&quot;highlighter-rouge&quot;&gt;font-path()&lt;/code&gt; for each font file.&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;@font-face&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;'Glyphicons Regular'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;url(font-path('glyphicons-regular.eot')&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;url(font-path('glyphicons-regular.eot?#iefix')&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;'embedded-opentype'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;sx&quot;&gt;url(font-path('glyphicons-regular.woff2')&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;'woff2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;sx&quot;&gt;url(font-path('glyphicons-regular.woff')&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;'woff'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;sx&quot;&gt;url(font-path('glyphicons-regular.ttf')&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;'truetype'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;sx&quot;&gt;url(font-path('glyphicons-regular.svg#glyphiconsregular')&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;'svg'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Restart your rails server and the icons will now be available in your app.&lt;/p&gt;

&lt;p&gt;Note the difference in naming between the CSS class for Bootstrap Glyphicons (&lt;code class=&quot;highlighter-rouge&quot;&gt;glyphicon&lt;/code&gt;) and Glyphicons PRO (&lt;code class=&quot;highlighter-rouge&quot;&gt;glyphicons&lt;/code&gt;). If your project was previously using Bootstrap 3 Glyphicons, each usage will need to be modified to take advantage of Glyphicons PRO.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;glyphicons glyphicons-thumbs-up&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Fri, 14 Aug 2015 05:30:00 -0500</pubDate>
        <link>http://cameronstanley.com/2015/08/14/using-glyphicons-pro-with-rails.html</link>
        <guid isPermaLink="true">http://cameronstanley.com/2015/08/14/using-glyphicons-pro-with-rails.html</guid>
        
        <category>rails</category>
        
        <category>glyphicons</category>
        
        
      </item>
    
      <item>
        <title>First</title>
        <description>&lt;p&gt;I’m starting this blog to keep up with things I learn or find interesting related to programming and software engineering, with the hopes it will help someone else. I’m currently a senior software engineer at &lt;a href=&quot;http://www.temenos.com/en-us/&quot;&gt;Temenos&lt;/a&gt; working on banking channel products. I’ve primarily worked on projects written in Ruby on Rails, Java, and Objective-C, but lately I have been getting into Node.js, Go, and Swift.&lt;/p&gt;

&lt;p&gt;The plan is to churn out at least one entry per week, so be sure to keep an eye out for updates.&lt;/p&gt;
</description>
        <pubDate>Thu, 28 May 2015 10:15:39 -0500</pubDate>
        <link>http://cameronstanley.com/2015/05/28/first.html</link>
        <guid isPermaLink="true">http://cameronstanley.com/2015/05/28/first.html</guid>
        
        <category>general</category>
        
        
      </item>
    
  </channel>
</rss>
